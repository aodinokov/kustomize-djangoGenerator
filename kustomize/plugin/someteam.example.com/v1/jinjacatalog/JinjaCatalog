#!/usr/bin/python3

import logging
import os
import sys
import copy
import yaml
from jinja2 import Environment

#functions for globals
def yaml_dump(y):
    logger.debug("yaml_dump y={}\n".format(str(y)))
    return yaml.dump(y, default_flow_style=False)

def dict_update(p, c):
    logger.debug("dict_update p={} c={}\n".format(str(p), str(c)))
    p_copy = copy.deepcopy(p)
    p_copy.update(c)
    return p_copy

def indent(i, s):
    logger.debug("indent i={} s={}\n".format(str(i), str(s)))
    return (' ' * i).join(s.splitlines(True))

#-------------------------------------------------------------------
def get_functions():
    return {
        'yaml_dump': yaml_dump,
        'dict_update': dict_update,
        'indent': indent, }

def get_input():
    input = []
    for i in yaml.load_all(sys.stdin):
        input.append(i)
    return input

def render_JinjaCatalog(global_obj):

    apiVersion = global_obj["config"].get("apiVersion")
    kind = global_obj["config"].get("kind")
    data = global_obj["config"].get("data")
    parents = global_obj["config"].get("parents")
    jinjaTemplate = global_obj["config"].get("jinjaTemplate")

    if apiVersion is None:
        sys.exit("wasn't able to find apiVersion - exiting")

    if kind is None:
        sys.exit("wasn't able to find kind - exiting")

    if jinjaTemplate is None:
        sys.exit("wasn't able to find jinjaTemplate - exiting")

    if kind != "JinjaCatalog":
        sys.exit("kind has not expected value")

    if not data is None:
        global_obj["data"] = data

    if not parents is None:
        for parent in parents:

            parent_root = parent.get('root')
            parent_jinjaCatalog = parent.get('jinjaCatalog')
            if parent_root is None:
                sys.exit("parent must contain root - exiting")

            if parent_jinjaCatalog is None:
                parent_jinjaCatalog = 'jinjacatalog.yaml'

            parent_yaml = yaml.load(get_renderred_JinjaCatalog(os.path.realpath(os.path.join(global_obj['config_root'], parent_root)), parent_jinjaCatalog))
            if parent_yaml is None:
                sys.exit("couldn't read yaml - for parent {} exiting".format(str(parent)))

            parent_kind = parent_yaml.get("kind")
            parent_data = parent_yaml.get("data")

            if parent_kind is None or parent_kind != "JinjaCatalog":
                sys.exit("parent transformed not to JinjaCatalog kind")

            if not parent_data is None:
                parent["data"] = parent_data

    logger.debug("rendering with global_obj={}\n".format(str(global_obj)))

    env = Environment()
    template = env.from_string(jinjaTemplate)
    rendered = template.render(global_obj)

    logger.debug("rendered ={}\n".format(str(rendered)))

    return rendered


def get_renderred_JinjaCatalog(config_root, config_jinjaCatalog):

    global_obj = {
        'functions': get_functions(),
        'config_root': config_root}

    with open(os.path.join(config_root, config_jinjaCatalog)) as f:
        global_obj["config"] = yaml.load(f)
    if  global_obj["config"] is None:
        sys.exit("wasn't able to read {}".format(str(config_jinjaCatalog)))

    return render_JinjaCatalog(global_obj)

def render_JinjaGenerator(global_obj):
    config_jinjaCatalog = global_obj["config"].get("jinjaCatalog")
    if config_jinjaCatalog is None:
        sys.exit("mandatory field jinjaCatalog is missed")

    config_jinjaTemplate = global_obj["config"].get("jinjaTemplate")
    if config_jinjaTemplate is None:
        sys.exit("mandatory field jinjaTemplate is missed")

    jinjaCatalog_yaml = yaml.load(get_renderred_JinjaCatalog(global_obj['config_root'], config_jinjaCatalog))
    if jinjaCatalog_yaml is None:
        sys.exit("couldn't ready yaml")

    jinjaCatalog_yaml_kind = jinjaCatalog_yaml.get("kind")

    if jinjaCatalog_yaml_kind is None or jinjaCatalog_yaml_kind != "JinjaCatalog":
        sys.exit("resource transformed not to JinjaCatalog kind")

    global_obj["catalog"] = jinjaCatalog_yaml

    logger.debug("rendering with global_obj={}\n".format(str(global_obj)))

    env = Environment()
    template = env.from_string(config_jinjaTemplate)
    rendered =  template.render(global_obj)

    logger.debug("rendered ={}\n".format(str(rendered)))

    return rendered

def render_JinjaTransformer(global_obj):
    global_obj["resources"] = get_input()

    return render_JinjaGenerator(global_obj)

# the main configuration processing function
def process_config(config_root, config_string):
    logger.debug("process_config config_root={}, config_string:\n{}\n".format(str(config_root), str(config_string)))

    global_obj = {
        'functions': get_functions(), 
        'config_root': config_root}

    global_obj["config"] = yaml.load(config_string)
    if global_obj["config"] is None:
        sys.exit("wasn't able to read config")
    logger.debug("config:\n{}\n".format(str(global_obj["config"])))

    config_kind = global_obj["config"].get("kind")
    if config_kind is None:
        sys.exit("config doesn't have kind field - exiting")
    logger.debug("config.kind = {}\n".format(str(config_kind)))

    if config_kind == 'JinjaGenerator':
        print(render_JinjaGenerator(global_obj))
    elif config_kind == "JinjaTransformer":
        print(render_JinjaTransformer(global_obj))

# configure logger
logger = logging.getLogger('jinjaPlugin')
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
if not os.environ.get('JINJA_DEBUG') is None and int(os.environ['JINJA_DEBUG']) > 0:
    ch.setLevel(logging.DEBUG)
else:
    ch.setLevel(logging.ERROR)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

# do the actual work
process_config(
    os.environ['KUSTOMIZE_PLUGIN_CONFIG_ROOT'],
    os.environ['KUSTOMIZE_PLUGIN_CONFIG_STRING'])

